// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Compares product names, quantities, discounts, and taxes between a purchase order and a sales order document (PDF, image, CSV, or Excel) using AI.
 *
 * - compareOrderDetails - Compares order details from document content and identifies discrepancies.
 * - CompareOrderDetailsInput - The input type for the compareOrderDetails function, expecting documents as data URIs.
 * - CompareOrderDetailsOutput - The output type for the compareOrderDetails function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CompareOrderDetailsInputSchema = z.object({
  purchaseOrder: z.string().describe("The purchase order document (PDF, image, CSV, or Excel) as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
  salesOrder: z.string().describe("The sales order document (PDF, image, CSV, or Excel) as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
});
export type CompareOrderDetailsInput = z.infer<typeof CompareOrderDetailsInputSchema>;

const DiscrepancySchema = z.object({
  field: z.string().describe('The field with a discrepancy (e.g., product name, quantity, discount, tax).'),
  purchaseOrderValue: z.string().describe('The value from the purchase order document.'),
  salesOrderValue: z.string().describe('The value from the sales order document.'),
  reason: z.string().describe('The reason for the discrepancy, or why it might be a mismatch.'),
});

const CompareOrderDetailsOutputSchema = z.object({
  discrepancies: z.array(DiscrepancySchema).describe('An array of discrepancies found between the purchase order and sales order documents.'),
  summary: z.string().describe('A summary of the comparison, highlighting key discrepancies found in the document contents.'),
});

export type CompareOrderDetailsOutput = z.infer<typeof CompareOrderDetailsOutputSchema>;

export async function compareOrderDetails(input: CompareOrderDetailsInput): Promise<CompareOrderDetailsOutput> {
  return compareOrderDetailsFlow(input);
}

const compareOrderDetailsPrompt = ai.definePrompt({
  name: 'compareOrderDetailsPrompt',
  input: {
    schema: CompareOrderDetailsInputSchema,
  },
  output: {
    schema: CompareOrderDetailsOutputSchema,
  },
  prompt: `You are an AI assistant specializing in comparing purchase orders (POs) and sales orders (SOs) provided as various document types.
Your task is to meticulously analyze the content of both documents and identify discrepancies in product names (including item codes or SKUs if present), quantities, unit prices, total prices, discounts (line item and overall), taxes (line item and overall), shipping costs, and any other relevant financial or item-specific details.

The documents can be in PDF, image (e.g., JPEG, PNG), CSV, or Excel (XLS, XLSX) format.
- If the document is an image, perform OCR to extract textual content.
- If the document is a CSV or Excel file, parse the tabular data to identify order details. Look for headers like 'Product', 'Item', 'Quantity', 'Price', 'Amount', 'Discount', 'Tax', etc.
- If the document is a PDF, extract its textual content.

Analyze the content of the following Purchase Order document and Sales Order document:

Purchase Order Document:
{{media url=purchaseOrder}}

Sales Order Document:
{{media url=salesOrder}}

Based on your analysis of the document contents, identify all discrepancies. For each discrepancy, specify:
1.  'field': The specific field or item that has a discrepancy (e.g., "Product 'ABC' Quantity", "Overall Discount", "Tax Rate for Item 'XYZ'", "Shipping Cost").
2.  'purchaseOrderValue': The value of this field as found in the Purchase Order document. If the field is not found, state "Not specified" or "N/A".
3.  'salesOrderValue': The value of this field as found in the Sales Order document. If the field is not found, state "Not specified" or "N/A".
4.  'reason': A brief explanation of the discrepancy (e.g., "Quantity differs", "Discount applied in PO but not in SO", "Unit price mismatch", "Item listed in PO but not in SO").

Provide a concise 'summary' of the comparison, highlighting the most significant discrepancies or confirming if the orders largely match. If no discrepancies are found, the summary should state that, and the discrepancies array should be empty.
Be thorough and accurate. If the document content is unreadable, ambiguous, or crucial sections are missing, note this limitation in your summary.
If dealing with CSV/Excel, clearly state if the structure made it difficult to extract specific fields.
`,
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
    ],
  }
});

const compareOrderDetailsFlow = ai.defineFlow(
  {
    name: 'compareOrderDetailsFlow',
    inputSchema: CompareOrderDetailsInputSchema,
    outputSchema: CompareOrderDetailsOutputSchema,
  },
  async input => {
    try {
      const {output} = await compareOrderDetailsPrompt(input);
      if (!output) {
        console.error('CompareOrderDetailsFlow: AI model returned null or undefined output.');
        throw new Error('AI model failed to return valid comparison data.');
      }
      return output;
    } catch (error) {
      console.error("Error in compareOrderDetailsFlow: ", error);
      if (error instanceof Error && (error.message.includes('CLIENT_ERROR') || error.message.toLowerCase().includes('unsupported mime type') || error.message.toLowerCase().includes('failed to parse content from bytes') || error.message.toLowerCase().includes('format error'))) {
        throw new Error(`The AI model could not process one or both of the documents. Please ensure they are valid and well-formatted (PDF, Image, CSV, Excel) and try again. Details: ${error.message}`);
      }
      throw error;
    }
  }
);

    