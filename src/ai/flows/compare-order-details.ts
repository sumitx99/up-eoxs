
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Compares product names, quantities, discounts, and taxes between a purchase order and a sales order document (PDF, image, CSV, or Excel) using AI.
 * Identifies both discrepancies and matching items.
 *
 * - compareOrderDetails - Compares order details from document content and identifies discrepancies and matches.
 * - CompareOrderDetailsInput - The input type for the compareOrderDetails function, expecting documents as data URIs.
 * - CompareOrderDetailsOutput - The output type for the compareOrderDetails function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CompareOrderDetailsInputSchema = z.object({
  purchaseOrder: z.string().describe("The purchase order document (PDF, image, CSV, or Excel) as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
  salesOrder: z.string().describe("The sales order document (PDF, image, CSV, or Excel) as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
});
export type CompareOrderDetailsInput = z.infer<typeof CompareOrderDetailsInputSchema>;

const DiscrepancySchema = z.object({
  field: z.string().describe('The field with a discrepancy (e.g., product name, quantity, discount, tax).'),
  purchaseOrderValue: z.string().describe('The value from the purchase order document.'),
  salesOrderValue: z.string().describe('The value from the sales order document.'),
  reason: z.string().describe('The reason for the discrepancy, or why it might be a mismatch.'),
});
export type Discrepancy = z.infer<typeof DiscrepancySchema>;


const MatchedItemSchema = z.object({
  field: z.string().describe('The field that matches (e.g., PO Number, Buyer Name, Product SKU).'),
  value: z.string().describe('The common value found in both the purchase order and sales order documents.'),
  matchQuality: z.enum(['exact', 'normalized', 'inferred']).optional().describe('The quality of the match (e.g., exact string match, match after normalization, or inferred match based on context). Default to "exact" if not specified.'),
});
export type MatchedItem = z.infer<typeof MatchedItemSchema>;

const CompareOrderDetailsOutputSchema = z.object({
  discrepancies: z.array(DiscrepancySchema).describe('An array of discrepancies found between the purchase order and sales order documents. This should always be an array, even if empty.'),
  matchedItems: z.array(MatchedItemSchema).describe('An array of items/fields that match between the purchase order and sales order documents. This should always be an array, even if empty. Strive to find matches for common header fields.'),
  summary: z.string().describe('A summary of the comparison, highlighting key discrepancies and confirmed matches found in the document contents.'),
});

export type CompareOrderDetailsOutput = z.infer<typeof CompareOrderDetailsOutputSchema>;

export async function compareOrderDetails(input: CompareOrderDetailsInput): Promise<CompareOrderDetailsOutput> {
  return compareOrderDetailsFlow(input);
}

const compareOrderDetailsPrompt = ai.definePrompt({
  name: 'compareOrderDetailsPrompt',
  input: {
    schema: CompareOrderDetailsInputSchema,
  },
  output: {
    schema: CompareOrderDetailsOutputSchema,
  },
  prompt: `You are an AI assistant specializing in comparing purchase orders (POs) and sales orders (SOs) provided as various document types.
Your task is to meticulously analyze the content of both documents and identify discrepancies AND matching items in product names (including item codes or SKUs if present), quantities, unit prices, total prices, discounts (line item and overall), taxes (line item and overall), shipping costs, PO Number, Buyer, Vendor, Payment Terms, Freight Terms, Total Amount, and any other relevant financial or item-specific details.

The documents can be in PDF, image (e.g., JPEG, PNG), CSV, or Excel (XLS, XLSX) format.
- If the document is an image, perform OCR to extract textual content.
- If the document is a CSV or Excel file, parse the tabular data to identify order details. Look for headers like 'Product', 'Item', 'Quantity', 'Price', 'Amount', 'Discount', 'Tax', 'PO Number', 'Buyer', 'Vendor', 'Payment Terms', etc.
- If the document is a PDF, extract its textual content.

Analyze the content of the following Purchase Order document and Sales Order document:

Purchase Order Document:
{{media url=purchaseOrder}}

Sales Order Document:
{{media url=salesOrder}}

Based on your analysis of the document contents:

1.  Identify all **discrepancies**. For each discrepancy, populate the 'discrepancies' array with objects specifying:
    *   'field': The specific field or item that has a discrepancy (e.g., "Product 'ABC' Quantity", "Overall Discount", "Payment Terms").
    *   'purchaseOrderValue': The value of this field as found in the Purchase Order document. If the field is not found, state "Not specified" or "N/A".
    *   'salesOrderValue': The value of this field as found in the Sales Order document. If the field is not found, state "Not specified" or "N/A".
    *   'reason': A brief explanation of the discrepancy (e.g., "Quantity differs", "Discount applied in PO but not in SO", "Unit price mismatch", "Item listed in PO but not in SO", "Payment terms do not match").

2.  Identify all **matching items/fields**. These are details that are consistent or equivalent across both documents. For each matched item, populate the 'matchedItems' array with objects specifying:
    *   'field': The name of the field that matches (e.g., "PO Number", "Buyer Name", "Product 'XYZ' Unit Price", "Vendor").
    *   'value': The common value found in both documents for that field.
    *   'matchQuality': (Optional) Describe the quality of the match. Use 'exact' if the values are identical. Use 'normalized' if they match after minor adjustments like case changes or removing extra spaces. Use 'inferred' if the match is clear from context despite slight wording differences. Default to 'exact' if not specified.

Provide a concise 'summary' of the comparison in the 'summary' field. This summary should highlight the most significant discrepancies and also mention key confirmed matches.

**Important Output Structure:**
- The 'discrepancies' array should always be present in the output. If no discrepancies are found, it should be an empty array (\`[]\`).
- The 'matchedItems' array should always be present in the output. If no matches are found after careful comparison, it should be an empty array (\`[]\`). Strive to find matches for common header fields (e.g., PO Number, Buyer Name, Vendor Name) if they are consistent, even if other details differ.

Be thorough and accurate. If the document content is unreadable, ambiguous, or crucial sections are missing, note this limitation in your summary.
If dealing with CSV/Excel, clearly state if the structure made it difficult to extract specific fields.
Ensure all fields in the output schema (discrepancies, matchedItems, summary) are populated according to your findings.
`,
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
    ],
  }
});

const compareOrderDetailsFlow = ai.defineFlow(
  {
    name: 'compareOrderDetailsFlow',
    inputSchema: CompareOrderDetailsInputSchema,
    outputSchema: CompareOrderDetailsOutputSchema,
  },
  async input => {
    try {
      const {output} = await compareOrderDetailsPrompt(input);
      if (!output) {
        console.error('CompareOrderDetailsFlow: AI model returned null or undefined output.');
        // Return a default structure in case of completely null output from AI, though Zod should catch this.
        return {
            summary: 'AI model failed to return valid comparison data. Please check the documents or try again.',
            matchedItems: [],
            discrepancies: [],
        };
      }
      // Ensure matchedItems and discrepancies are always arrays, even if the model doesn't return them or returns them as null
      // Zod schema with .array() should handle this, but this is an extra safeguard.
      output.matchedItems = Array.isArray(output.matchedItems) ? output.matchedItems : [];
      output.discrepancies = Array.isArray(output.discrepancies) ? output.discrepancies : [];
      
      return output;
    } catch (error) {
      console.error("Error in compareOrderDetailsFlow: ", error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      if (errorMessage.includes('CLIENT_ERROR') || errorMessage.toLowerCase().includes('unsupported mime type') || errorMessage.toLowerCase().includes('failed to parse content from bytes') || errorMessage.toLowerCase().includes('format error') || errorMessage.toLowerCase().includes('consumer_suspended')) {
        // For client-side display, rethrow with a user-friendly message.
        // The specific CONSUMER_SUSPENDED error should ideally be caught by the global error handler or UI.
        throw new Error(`The AI model could not process one or both of the documents. Please ensure they are valid and well-formatted (PDF, Image, CSV, Excel) and try again. Details: ${errorMessage}`);
      }
      // For other errors, provide a generic fallback.
       return {
            summary: `An unexpected error occurred during AI processing: ${errorMessage}. Please try again.`,
            matchedItems: [],
            discrepancies: [],
        };
    }
  }
);
